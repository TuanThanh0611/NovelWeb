import { DestroyRef, ENVIRONMENT_INITIALIZER, Injector, PLATFORM_ID, computed, effect, inject, makeEnvironmentProviders, runInInjectionContext, } from '@angular/core';
import { onlineManager } from '@tanstack/query-core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { injectQueryClient, provideQueryClient } from './inject-query-client';
import { isDevMode } from './util/is-dev-mode/is-dev-mode';
/**
 * Sets up providers necessary to enable TanStack Query functionality for Angular applications.
 *
 * Allows to configure a `QueryClient` and optional features such as developer tools.
 *
 * **Example - standalone**
 *
 * ```ts
 * import {
 *   provideTanStackQuery,
 *   QueryClient,
 * } from '@tanstack/angular-query-experimental'
 *
 * bootstrapApplication(AppComponent, {
 *   providers: [provideTanStackQuery(new QueryClient())],
 * })
 * ```
 *
 * **Example - NgModule-based**
 *
 * ```ts
 * import {
 *   provideTanStackQuery,
 *   QueryClient,
 * } from '@tanstack/angular-query-experimental'
 *
 * @NgModule({
 *   declarations: [AppComponent],
 *   imports: [BrowserModule],
 *   providers: [provideTanStackQuery(new QueryClient())],
 *   bootstrap: [AppComponent],
 * })
 * export class AppModule {}
 * ```
 *
 * You can also enable optional developer tools by adding `withDevtools`. By
 * default the tools will then be loaded when your app is in development mode.
 * ```ts
 * import {
 *   provideTanStackQuery,
 *   withDevtools
 *   QueryClient,
 * } from '@tanstack/angular-query-experimental'
 *
 * bootstrapApplication(AppComponent,
 *   {
 *     providers: [
 *       provideTanStackQuery(new QueryClient(), withDevtools())
 *     ]
 *   }
 * )
 * ```
 * @param queryClient - A `QueryClient` instance.
 * @param features - Optional features to configure additional Query functionality.
 * @returns A set of providers to set up TanStack Query.
 * @public
 * @see https://tanstack.com/query/v5/docs/framework/angular/quick-start
 * @see withDevtools
 */
export function provideTanStackQuery(queryClient, ...features) {
    return makeEnvironmentProviders([
        provideQueryClient(queryClient),
        {
            provide: ENVIRONMENT_INITIALIZER,
            multi: true,
            useValue: () => {
                queryClient.mount();
                // Unmount the query client on application destroy
                inject(DestroyRef).onDestroy(() => queryClient.unmount());
            },
        },
        features.map((feature) => feature.ɵproviders),
    ]);
}
/**
 * Sets up providers necessary to enable TanStack Query functionality for Angular applications.
 *
 * Allows to configure a `QueryClient`.
 * @param queryClient - A `QueryClient` instance.
 * @returns A set of providers to set up TanStack Query.
 * @public
 * @see https://tanstack.com/query/v5/docs/framework/angular/quick-start
 * @deprecated Use `provideTanStackQuery` instead.
 */
export function provideAngularQuery(queryClient) {
    return provideTanStackQuery(queryClient);
}
/**
 * Helper function to create an object that represents a Query feature.
 * @param kind -
 * @param providers -
 * @returns A Query feature.
 */
function queryFeature(kind, providers) {
    return { ɵkind: kind, ɵproviders: providers };
}
/**
 * Enables developer tools.
 *
 * **Example**
 *
 * ```ts
 * export const appConfig: ApplicationConfig = {
 *   providers: [
 *     provideTanStackQuery(new QueryClient(), withDevtools())
 *   ]
 * }
 * ```
 * By default the devtools will be loaded when Angular runs in development mode and rendered in `<body>`.
 *
 * If you need more control over when devtools are loaded, you can use the `loadDevtools` option. This is particularly useful if you want to load devtools based on environment configurations. For instance, you might have a test environment running in production mode but still require devtools to be available.
 *
 * If you need more control over where devtools are rendered, consider `injectDevtoolsPanel`. This allows rendering devtools inside your own devtools for example.
 * @param optionsFn - A function that returns `DevtoolsOptions`.
 * @returns A set of providers for use with `provideTanStackQuery`.
 * @public
 * @see {@link provideTanStackQuery}
 * @see {@link DevtoolsOptions}
 */
export function withDevtools(optionsFn) {
    let providers = [];
    if (!isDevMode() && !optionsFn) {
        providers = [];
    }
    else {
        providers = [
            {
                provide: ENVIRONMENT_INITIALIZER,
                multi: true,
                useFactory: () => {
                    if (!isPlatformBrowser(inject(PLATFORM_ID)))
                        return () => { };
                    const injector = inject(Injector);
                    const options = computed(() => runInInjectionContext(injector, () => optionsFn?.() ?? {}));
                    let devtools = null;
                    let el = null;
                    const shouldLoadToolsSignal = computed(() => {
                        const { loadDevtools } = options();
                        return typeof loadDevtools === 'boolean'
                            ? loadDevtools
                            : isDevMode();
                    });
                    const doc = inject(DOCUMENT);
                    const destroyRef = inject(DestroyRef);
                    const getResolvedQueryClient = () => {
                        const injectedClient = injectQueryClient({
                            optional: true,
                            injector,
                        });
                        const client = options().client ?? injectedClient;
                        if (!client) {
                            throw new Error('No QueryClient found');
                        }
                        return client;
                    };
                    const destroyDevtools = () => {
                        devtools?.unmount();
                        el?.remove();
                        devtools = null;
                    };
                    return () => effect(() => {
                        const shouldLoadTools = shouldLoadToolsSignal();
                        const { client, position, errorTypes, buttonPosition, initialIsOpen, } = options();
                        if (devtools && !shouldLoadTools) {
                            destroyDevtools();
                            return;
                        }
                        else if (devtools && shouldLoadTools) {
                            client && devtools.setClient(client);
                            position && devtools.setPosition(position);
                            errorTypes && devtools.setErrorTypes(errorTypes);
                            buttonPosition && devtools.setButtonPosition(buttonPosition);
                            initialIsOpen && devtools.setInitialIsOpen(initialIsOpen);
                            return;
                        }
                        else if (!shouldLoadTools) {
                            return;
                        }
                        el = doc.body.appendChild(document.createElement('div'));
                        el.classList.add('tsqd-parent-container');
                        import('@tanstack/query-devtools').then((queryDevtools) => runInInjectionContext(injector, () => {
                            devtools = new queryDevtools.TanstackQueryDevtools({
                                ...options(),
                                client: getResolvedQueryClient(),
                                queryFlavor: 'Angular Query',
                                version: '5',
                                onlineManager,
                            });
                            el && devtools.mount(el);
                            // Unmount the devtools on application destroy
                            destroyRef.onDestroy(destroyDevtools);
                        }));
                    });
                },
            },
        ];
    }
    return queryFeature('DeveloperTools', providers);
}
export const queryFeatures = ['DeveloperTools'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Byb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUNWLHVCQUF1QixFQUN2QixRQUFRLEVBQ1IsV0FBVyxFQUNYLFFBQVEsRUFDUixNQUFNLEVBQ04sTUFBTSxFQUNOLHdCQUF3QixFQUN4QixxQkFBcUIsR0FDdEIsTUFBTSxlQUFlLENBQUE7QUFDdEIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQ3BELE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUM3RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFVMUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EwREc7QUFDSCxNQUFNLFVBQVUsb0JBQW9CLENBQ2xDLFdBQXdCLEVBQ3hCLEdBQUcsUUFBOEI7SUFFakMsT0FBTyx3QkFBd0IsQ0FBQztRQUM5QixrQkFBa0IsQ0FBQyxXQUFXLENBQUM7UUFDL0I7WUFDRSxPQUFPLEVBQUUsdUJBQXVCO1lBQ2hDLEtBQUssRUFBRSxJQUFJO1lBQ1gsUUFBUSxFQUFFLEdBQUcsRUFBRTtnQkFDYixXQUFXLENBQUMsS0FBSyxFQUFFLENBQUE7Z0JBQ25CLGtEQUFrRDtnQkFDbEQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtZQUMzRCxDQUFDO1NBQ0Y7UUFDRCxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFD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QUM5QyxVQUFVLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFBO3dCQUN2QyxDQUFDLENBQUMsQ0FDSCxDQUFBO29CQUNILENBQUMsQ0FBQyxDQUFBO2dCQUNOLENBQUM7YUFDRjtTQUNGLENBQUE7SUFDSCxDQUFDO0lBQ0QsT0FBTyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUE7QUFDbEQsQ0FBQztBQVlELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLGdCQUFnQixDQUFVLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEZXN0cm95UmVmLFxuICBFTlZJUk9OTUVOVF9JTklUSUFMSVpFUixcbiAgSW5qZWN0b3IsXG4gIFBMQVRGT1JNX0lELFxuICBjb21wdXRlZCxcbiAgZWZmZWN0LFxuICBpbmplY3QsXG4gIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyxcbiAgcnVuSW5JbmplY3Rpb25Db250ZXh0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuaW1wb3J0IHsgb25saW5lTWFuYWdlciB9IGZyb20gJ0B0YW5zdGFjay9xdWVyeS1jb3JlJ1xuaW1wb3J0IHsgRE9DVU1FTlQsIGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJ1xuaW1wb3J0IHsgaW5qZWN0UXVlcnlDbGllbnQsIHByb3ZpZGVRdWVyeUNsaWVudCB9IGZyb20gJy4vaW5qZWN0LXF1ZXJ5LWNsaWVudCdcbmltcG9ydCB7IGlzRGV2TW9kZSB9IGZyb20gJy4vdXRpbC9pcy1kZXYtbW9kZS9pcy1kZXYtbW9kZSdcbmltcG9ydCB0eXBlIHsgUXVlcnlDbGllbnQgfSBmcm9tICdAdGFuc3RhY2svcXVlcnktY29yZSdcbmltcG9ydCB0eXBlIHsgRW52aXJvbm1lbnRQcm92aWRlcnMsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCB0eXBlIHtcbiAgRGV2dG9vbHNCdXR0b25Qb3NpdGlvbixcbiAgRGV2dG9vbHNFcnJvclR5cGUsXG4gIERldnRvb2xzUG9zaXRpb24sXG4gIFRhbnN0YWNrUXVlcnlEZXZ0b29scyxcbn0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWRldnRvb2xzJ1xuXG4vKipcbiAqIFNldHMgdXAgcHJvdmlkZXJzIG5lY2Vzc2FyeSB0byBlbmFibGUgVGFuU3RhY2sgUXVlcnkgZnVuY3Rpb25hbGl0eSBmb3IgQW5ndWxhciBhcHBsaWNhdGlvbnMuXG4gKlxuICogQWxsb3dzIHRvIGNvbmZpZ3VyZSBhIGBRdWVyeUNsaWVudGAgYW5kIG9wdGlvbmFsIGZlYXR1cmVzIHN1Y2ggYXMgZGV2ZWxvcGVyIHRvb2xzLlxuICpcbiAqICoqRXhhbXBsZSAtIHN0YW5kYWxvbmUqKlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQge1xuICogICBwcm92aWRlVGFuU3RhY2tRdWVyeSxcbiAqICAgUXVlcnlDbGllbnQsXG4gKiB9IGZyb20gJ0B0YW5zdGFjay9hbmd1bGFyLXF1ZXJ5LWV4cGVyaW1lbnRhbCdcbiAqXG4gKiBib290c3RyYXBBcHBsaWNhdGlvbihBcHBDb21wb25lbnQsIHtcbiAqICAgcHJvdmlkZXJzOiBbcHJvdmlkZVRhblN0YWNrUXVlcnkobmV3IFF1ZXJ5Q2xpZW50KCkpXSxcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiAqKkV4YW1wbGUgLSBOZ01vZHVsZS1iYXNlZCoqXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7XG4gKiAgIHByb3ZpZGVUYW5TdGFja1F1ZXJ5LFxuICogICBRdWVyeUNsaWVudCxcbiAqIH0gZnJvbSAnQHRhbnN0YWNrL2FuZ3VsYXItcXVlcnktZXhwZXJpbWVudGFsJ1xuICpcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGRlY2xhcmF0aW9uczogW0FwcENvbXBvbmVudF0sXG4gKiAgIGltcG9ydHM6IFtCcm93c2VyTW9kdWxlXSxcbiAqICAgcHJvdmlkZXJzOiBbcHJvdmlkZVRhblN0YWNrUXVlcnkobmV3IFF1ZXJ5Q2xpZW50KCkpXSxcbiAqICAgYm9vdHN0cmFwOiBbQXBwQ29tcG9uZW50XSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHt9XG4gKiBgYGBcbiAqXG4gKiBZb3UgY2FuIGFsc28gZW5hYmxlIG9wdGlvbmFsIGRldmVsb3BlciB0b29scyBieSBhZGRpbmcgYHdpdGhEZXZ0b29sc2AuIEJ5XG4gKiBkZWZhdWx0IHRoZSB0b29scyB3aWxsIHRoZW4gYmUgbG9hZGVkIHdoZW4geW91ciBhcHAgaXMgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cbiAqIGBgYHRzXG4gKiBpbXBvcnQge1xuICogICBwcm92aWRlVGFuU3RhY2tRdWVyeSxcbiAqICAgd2l0aERldnRvb2xzXG4gKiAgIFF1ZXJ5Q2xpZW50LFxuICogfSBmcm9tICdAdGFuc3RhY2svYW5ndWxhci1xdWVyeS1leHBlcmltZW50YWwnXG4gKlxuICogYm9vdHN0cmFwQXBwbGljYXRpb24oQXBwQ29tcG9uZW50LFxuICogICB7XG4gKiAgICAgcHJvdmlkZXJzOiBbXG4gKiAgICAgICBwcm92aWRlVGFuU3RhY2tRdWVyeShuZXcgUXVlcnlDbGllbnQoKSwgd2l0aERldnRvb2xzKCkpXG4gKiAgICAgXVxuICogICB9XG4gKiApXG4gKiBgYGBcbiAqIEBwYXJhbSBxdWVyeUNsaWVudCAtIEEgYFF1ZXJ5Q2xpZW50YCBpbnN0YW5jZS5cbiAqIEBwYXJhbSBmZWF0dXJlcyAtIE9wdGlvbmFsIGZlYXR1cmVzIHRvIGNvbmZpZ3VyZSBhZGRpdGlvbmFsIFF1ZXJ5IGZ1bmN0aW9uYWxpdHkuXG4gKiBAcmV0dXJucyBBIHNldCBvZiBwcm92aWRlcnMgdG8gc2V0IHVwIFRhblN0YWNrIFF1ZXJ5LlxuICogQHB1YmxpY1xuICogQHNlZSBodHRwczovL3RhbnN0YWNrLmNvbS9xdWVyeS92NS9kb2NzL2ZyYW1ld29yay9hbmd1bGFyL3F1aWNrLXN0YXJ0XG4gKiBAc2VlIHdpdGhEZXZ0b29sc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVRhblN0YWNrUXVlcnkoXG4gIHF1ZXJ5Q2xpZW50OiBRdWVyeUNsaWVudCxcbiAgLi4uZmVhdHVyZXM6IEFycmF5PFF1ZXJ5RmVhdHVyZXM+XG4pOiBFbnZpcm9ubWVudFByb3ZpZGVycyB7XG4gIHJldHVybiBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMoW1xuICAgIHByb3ZpZGVRdWVyeUNsaWVudChxdWVyeUNsaWVudCksXG4gICAge1xuICAgICAgcHJvdmlkZTogRU5WSVJPTk1FTlRfSU5JVElBTElaRVIsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgIHVzZVZhbHVlOiAoKSA9PiB7XG4gICAgICAgIHF1ZXJ5Q2xpZW50Lm1vdW50KClcbiAgICAgICAgLy8gVW5tb3VudCB0aGUgcXVlcnkgY2xpZW50IG9uIGFwcGxpY2F0aW9uIGRlc3Ryb3lcbiAgICAgICAgaW5qZWN0KERlc3Ryb3lSZWYpLm9uRGVzdHJveSgoKSA9PiBxdWVyeUNsaWVudC51bm1vdW50KCkpXG4gICAgICB9LFxuICAgIH0sXG4gICAgZmVhdHVyZXMubWFwKChmZWF0dXJlKSA9PiBmZWF0dXJlLsm1cHJvdmlkZXJzKSxcbiAgXSlcbn1cblxuLyoqXG4gKiBTZXRzIHVwIHByb3ZpZGVycyBuZWNlc3NhcnkgdG8gZW5hYmxlIFRhblN0YWNrIFF1ZXJ5IGZ1bmN0aW9uYWxpdHkgZm9yIEFuZ3VsYXIgYXBwbGljYXRpb25zLlxuICpcbiAqIEFsbG93cyB0byBjb25maWd1cmUgYSBgUXVlcnlDbGllbnRgLlxuICogQHBhcmFtIHF1ZXJ5Q2xpZW50IC0gQSBgUXVlcnlDbGllbnRgIGluc3RhbmNlLlxuICogQHJldHVybnMgQSBzZXQgb2YgcHJvdmlkZXJzIHRvIHNldCB1cCBUYW5TdGFjayBRdWVyeS5cbiAqIEBwdWJsaWNcbiAqIEBzZWUgaHR0cHM6Ly90YW5zdGFjay5jb20vcXVlcnkvdjUvZG9jcy9mcmFtZXdvcmsvYW5ndWxhci9xdWljay1zdGFydFxuICogQGRlcHJlY2F0ZWQgVXNlIGBwcm92aWRlVGFuU3RhY2tRdWVyeWAgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVBbmd1bGFyUXVlcnkoXG4gIHF1ZXJ5Q2xpZW50OiBRdWVyeUNsaWVudCxcbik6IEVudmlyb25tZW50UHJvdmlkZXJzIHtcbiAgcmV0dXJuIHByb3ZpZGVUYW5TdGFja1F1ZXJ5KHF1ZXJ5Q2xpZW50KVxufVxuXG4vKipcbiAqIEhlbHBlciB0eXBlIHRvIHJlcHJlc2VudCBhIFF1ZXJ5IGZlYXR1cmUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUXVlcnlGZWF0dXJlPFRGZWF0dXJlS2luZCBleHRlbmRzIFF1ZXJ5RmVhdHVyZUtpbmQ+IHtcbiAgybVraW5kOiBURmVhdHVyZUtpbmRcbiAgybVwcm92aWRlcnM6IEFycmF5PFByb3ZpZGVyPlxufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyBhIFF1ZXJ5IGZlYXR1cmUuXG4gKiBAcGFyYW0ga2luZCAtXG4gKiBAcGFyYW0gcHJvdmlkZXJzIC1cbiAqIEByZXR1cm5zIEEgUXVlcnkgZmVhdHVyZS5cbiAqL1xuZnVuY3Rpb24gcXVlcnlGZWF0dXJlPFRGZWF0dXJlS2luZCBleHRlbmRzIFF1ZXJ5RmVhdHVyZUtpbmQ+KFxuICBraW5kOiBURmVhdHVyZUtpbmQsXG4gIHByb3ZpZGVyczogQXJyYXk8UHJvdmlkZXI+LFxuKTogUXVlcnlGZWF0dXJlPFRGZWF0dXJlS2luZD4ge1xuICByZXR1cm4geyDJtWtpbmQ6IGtpbmQsIMm1cHJvdmlkZXJzOiBwcm92aWRlcnMgfVxufVxuXG4vKipcbiAqIEEgdHlwZSBhbGlhcyB0aGF0IHJlcHJlc2VudHMgYSBmZWF0dXJlIHdoaWNoIGVuYWJsZXMgZGV2ZWxvcGVyIHRvb2xzLlxuICogVGhlIHR5cGUgaXMgdXNlZCB0byBkZXNjcmliZSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgd2l0aERldnRvb2xzYCBmdW5jdGlvbi5cbiAqIEBwdWJsaWNcbiAqIEBzZWUge0BsaW5rIHdpdGhEZXZ0b29sc31cbiAqL1xuZXhwb3J0IHR5cGUgRGV2ZWxvcGVyVG9vbHNGZWF0dXJlID0gUXVlcnlGZWF0dXJlPCdEZXZlbG9wZXJUb29scyc+XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgY29uZmlndXJpbmcgdGhlIFRhblN0YWNrIFF1ZXJ5IGRldnRvb2xzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIERldnRvb2xzT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0cnVlIGlmIHlvdSB3YW50IHRoZSBkZXZ0b29scyB0byBkZWZhdWx0IHRvIGJlaW5nIG9wZW5cbiAgICovXG4gIGluaXRpYWxJc09wZW4/OiBib29sZWFuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIFRhblN0YWNrIGxvZ28gdG8gb3BlbiBhbmQgY2xvc2UgdGhlIGRldnRvb2xzIHBhbmVsLlxuICAgKiBgdG9wLWxlZnRgIHwgYHRvcC1yaWdodGAgfCBgYm90dG9tLWxlZnRgIHwgYGJvdHRvbS1yaWdodGAgfCBgcmVsYXRpdmVgXG4gICAqIERlZmF1bHRzIHRvIGBib3R0b20tcmlnaHRgLlxuICAgKi9cbiAgYnV0dG9uUG9zaXRpb24/OiBEZXZ0b29sc0J1dHRvblBvc2l0aW9uXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIFRhblN0YWNrIFF1ZXJ5IGRldnRvb2xzIHBhbmVsLlxuICAgKiBgdG9wYCB8IGBib3R0b21gIHwgYGxlZnRgIHwgYHJpZ2h0YFxuICAgKiBEZWZhdWx0cyB0byBgYm90dG9tYC5cbiAgICovXG4gIHBvc2l0aW9uPzogRGV2dG9vbHNQb3NpdGlvblxuICAvKipcbiAgICogQ3VzdG9tIGluc3RhbmNlIG9mIFF1ZXJ5Q2xpZW50XG4gICAqL1xuICBjbGllbnQ/OiBRdWVyeUNsaWVudFxuICAvKipcbiAgICogVXNlIHRoaXMgc28geW91IGNhbiBkZWZpbmUgY3VzdG9tIGVycm9ycyB0aGF0IGNhbiBiZSBzaG93biBpbiB0aGUgZGV2dG9vbHMuXG4gICAqL1xuICBlcnJvclR5cGVzPzogQXJyYXk8RGV2dG9vbHNFcnJvclR5cGU+XG4gIC8qKlxuICAgKiBVc2UgdGhpcyB0byBwYXNzIGEgbm9uY2UgdG8gdGhlIHN0eWxlIHRhZyB0aGF0IGlzIGFkZGVkIHRvIHRoZSBkb2N1bWVudCBoZWFkLiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3UgYXJlIHVzaW5nIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgKENTUCkgbm9uY2UgdG8gYWxsb3cgaW5saW5lIHN0eWxlcy5cbiAgICovXG4gIHN0eWxlTm9uY2U/OiBzdHJpbmdcbiAgLyoqXG4gICAqIFVzZSB0aGlzIHNvIHlvdSBjYW4gYXR0YWNoIHRoZSBkZXZ0b29sJ3Mgc3R5bGVzIHRvIGEgc3BlY2lmaWMgZWxlbWVudCBpbiB0aGUgRE9NLlxuICAgKi9cbiAgc2hhZG93RE9NVGFyZ2V0PzogU2hhZG93Um9vdFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBkZXZlbG9wZXIgdG9vbHMgc2hvdWxkIGxvYWQuXG4gICAqIC0gYGF1dG9gLSAoRGVmYXVsdCkgTGF6aWx5IGxvYWRzIGRldnRvb2xzIHdoZW4gaW4gZGV2ZWxvcG1lbnQgbW9kZS4gU2tpcHMgbG9hZGluZyBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gICAqIC0gYHRydWVgLSBBbHdheXMgbG9hZCB0aGUgZGV2dG9vbHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIGVudmlyb25tZW50LlxuICAgKiAtIGBmYWxzZWAtIE5ldmVyIGxvYWQgdGhlIGRldnRvb2xzLCByZWdhcmRsZXNzIG9mIHRoZSBlbnZpcm9ubWVudC5cbiAgICpcbiAgICogWW91IGNhbiB1c2UgYHRydWVgIGFuZCBgZmFsc2VgIHRvIG92ZXJyaWRlIGxvYWRpbmcgZGV2ZWxvcGVyIHRvb2xzIGZyb20gYW4gZW52aXJvbm1lbnQgZmlsZS5cbiAgICogRm9yIGV4YW1wbGUsIGEgdGVzdCBlbnZpcm9ubWVudCBtaWdodCBydW4gaW4gcHJvZHVjdGlvbiBtb2RlIGJ1dCB5b3UgbWF5IHdhbnQgdG8gbG9hZCBkZXZlbG9wZXIgdG9vbHMuXG4gICAqXG4gICAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiB1c2UgYSBzaWduYWwgaW4gdGhlIGNhbGxiYWNrIHRvIGR5bmFtaWNhbGx5IGxvYWQgdGhlIGRldnRvb2xzIGJhc2VkIG9uIGEgY29uZGl0aW9uLiBGb3IgZXhhbXBsZSxcbiAgICogYSBzaWduYWwgY3JlYXRlZCBmcm9tIGEgUnhKUyBvYnNlcnZhYmxlIHRoYXQgbGlzdGVucyBmb3IgYSBrZXlib2FyZCBzaG9ydGN1dC5cbiAgICpcbiAgICogKipFeGFtcGxlKipcbiAgICogYGBgdHNcbiAgICogICAgd2l0aERldnRvb2xzKCgpID0+ICh7XG4gICAqICAgICAgaW5pdGlhbElzT3BlbjogdHJ1ZSxcbiAgICogICAgICBsb2FkRGV2dG9vbHM6IGluamVjdChFeGFtcGxlU2VydmljZSkubG9hZERldnRvb2xzKClcbiAgICogICAgfSkpXG4gICAqICBgYGBcbiAgICovXG4gIGxvYWREZXZ0b29scz86ICdhdXRvJyB8IGJvb2xlYW5cbn1cblxuLyoqXG4gKiBFbmFibGVzIGRldmVsb3BlciB0b29scy5cbiAqXG4gKiAqKkV4YW1wbGUqKlxuICpcbiAqIGBgYHRzXG4gKiBleHBvcnQgY29uc3QgYXBwQ29uZmlnOiBBcHBsaWNhdGlvbkNvbmZpZyA9IHtcbiAqICAgcHJvdmlkZXJzOiBbXG4gKiAgICAgcHJvdmlkZVRhblN0YWNrUXVlcnkobmV3IFF1ZXJ5Q2xpZW50KCksIHdpdGhEZXZ0b29scygpKVxuICogICBdXG4gKiB9XG4gKiBgYGBcbiAqIEJ5IGRlZmF1bHQgdGhlIGRldnRvb2xzIHdpbGwgYmUgbG9hZGVkIHdoZW4gQW5ndWxhciBydW5zIGluIGRldmVsb3BtZW50IG1vZGUgYW5kIHJlbmRlcmVkIGluIGA8Ym9keT5gLlxuICpcbiAqIElmIHlvdSBuZWVkIG1vcmUgY29udHJvbCBvdmVyIHdoZW4gZGV2dG9vbHMgYXJlIGxvYWRlZCwgeW91IGNhbiB1c2UgdGhlIGBsb2FkRGV2dG9vbHNgIG9wdGlvbi4gVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGlmIHlvdSB3YW50IHRvIGxvYWQgZGV2dG9vbHMgYmFzZWQgb24gZW52aXJvbm1lbnQgY29uZmlndXJhdGlvbnMuIEZvciBpbnN0YW5jZSwgeW91IG1pZ2h0IGhhdmUgYSB0ZXN0IGVudmlyb25tZW50IHJ1bm5pbmcgaW4gcHJvZHVjdGlvbiBtb2RlIGJ1dCBzdGlsbCByZXF1aXJlIGRldnRvb2xzIHRvIGJlIGF2YWlsYWJsZS5cbiAqXG4gKiBJZiB5b3UgbmVlZCBtb3JlIGNvbnRyb2wgb3ZlciB3aGVyZSBkZXZ0b29scyBhcmUgcmVuZGVyZWQsIGNvbnNpZGVyIGBpbmplY3REZXZ0b29sc1BhbmVsYC4gVGhpcyBhbGxvd3MgcmVuZGVyaW5nIGRldnRvb2xzIGluc2lkZSB5b3VyIG93biBkZXZ0b29scyBmb3IgZXhhbXBsZS5cbiAqIEBwYXJhbSBvcHRpb25zRm4gLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgRGV2dG9vbHNPcHRpb25zYC5cbiAqIEByZXR1cm5zIEEgc2V0IG9mIHByb3ZpZGVycyBmb3IgdXNlIHdpdGggYHByb3ZpZGVUYW5TdGFja1F1ZXJ5YC5cbiAqIEBwdWJsaWNcbiAqIEBzZWUge0BsaW5rIHByb3ZpZGVUYW5TdGFja1F1ZXJ5fVxuICogQHNlZSB7QGxpbmsgRGV2dG9vbHNPcHRpb25zfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aERldnRvb2xzKFxuICBvcHRpb25zRm4/OiAoKSA9PiBEZXZ0b29sc09wdGlvbnMsXG4pOiBEZXZlbG9wZXJUb29sc0ZlYXR1cmUge1xuICBsZXQgcHJvdmlkZXJzOiBBcnJheTxQcm92aWRlcj4gPSBbXVxuICBpZiAoIWlzRGV2TW9kZSgpICYmICFvcHRpb25zRm4pIHtcbiAgICBwcm92aWRlcnMgPSBbXVxuICB9IGVsc2Uge1xuICAgIHByb3ZpZGVycyA9IFtcbiAgICAgIHtcbiAgICAgICAgcHJvdmlkZTogRU5WSVJPTk1FTlRfSU5JVElBTElaRVIsXG4gICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICB1c2VGYWN0b3J5OiAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFpc1BsYXRmb3JtQnJvd3NlcihpbmplY3QoUExBVEZPUk1fSUQpKSkgcmV0dXJuICgpID0+IHt9XG4gICAgICAgICAgY29uc3QgaW5qZWN0b3IgPSBpbmplY3QoSW5qZWN0b3IpXG4gICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAgICAgICBydW5JbkluamVjdGlvbkNvbnRleHQoaW5qZWN0b3IsICgpID0+IG9wdGlvbnNGbj8uKCkgPz8ge30pLFxuICAgICAgICAgIClcblxuICAgICAgICAgIGxldCBkZXZ0b29sczogVGFuc3RhY2tRdWVyeURldnRvb2xzIHwgbnVsbCA9IG51bGxcbiAgICAgICAgICBsZXQgZWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGxcblxuICAgICAgICAgIGNvbnN0IHNob3VsZExvYWRUb29sc1NpZ25hbCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgbG9hZERldnRvb2xzIH0gPSBvcHRpb25zKClcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgbG9hZERldnRvb2xzID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgICAgPyBsb2FkRGV2dG9vbHNcbiAgICAgICAgICAgICAgOiBpc0Rldk1vZGUoKVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBjb25zdCBkb2MgPSBpbmplY3QoRE9DVU1FTlQpXG4gICAgICAgICAgY29uc3QgZGVzdHJveVJlZiA9IGluamVjdChEZXN0cm95UmVmKVxuXG4gICAgICAgICAgY29uc3QgZ2V0UmVzb2x2ZWRRdWVyeUNsaWVudCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluamVjdGVkQ2xpZW50ID0gaW5qZWN0UXVlcnlDbGllbnQoe1xuICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgICAgICAgaW5qZWN0b3IsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gb3B0aW9ucygpLmNsaWVudCA/PyBpbmplY3RlZENsaWVudFxuICAgICAgICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBRdWVyeUNsaWVudCBmb3VuZCcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZGVzdHJveURldnRvb2xzID0gKCkgPT4ge1xuICAgICAgICAgICAgZGV2dG9vbHM/LnVubW91bnQoKVxuICAgICAgICAgICAgZWw/LnJlbW92ZSgpXG4gICAgICAgICAgICBkZXZ0b29scyA9IG51bGxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gKCkgPT5cbiAgICAgICAgICAgIGVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNob3VsZExvYWRUb29scyA9IHNob3VsZExvYWRUb29sc1NpZ25hbCgpXG4gICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgZXJyb3JUeXBlcyxcbiAgICAgICAgICAgICAgICBidXR0b25Qb3NpdGlvbixcbiAgICAgICAgICAgICAgICBpbml0aWFsSXNPcGVuLFxuICAgICAgICAgICAgICB9ID0gb3B0aW9ucygpXG5cbiAgICAgICAgICAgICAgaWYgKGRldnRvb2xzICYmICFzaG91bGRMb2FkVG9vbHMpIHtcbiAgICAgICAgICAgICAgICBkZXN0cm95RGV2dG9vbHMoKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRldnRvb2xzICYmIHNob3VsZExvYWRUb29scykge1xuICAgICAgICAgICAgICAgIGNsaWVudCAmJiBkZXZ0b29scy5zZXRDbGllbnQoY2xpZW50KVxuICAgICAgICAgICAgICAgIHBvc2l0aW9uICYmIGRldnRvb2xzLnNldFBvc2l0aW9uKHBvc2l0aW9uKVxuICAgICAgICAgICAgICAgIGVycm9yVHlwZXMgJiYgZGV2dG9vbHMuc2V0RXJyb3JUeXBlcyhlcnJvclR5cGVzKVxuICAgICAgICAgICAgICAgIGJ1dHRvblBvc2l0aW9uICYmIGRldnRvb2xzLnNldEJ1dHRvblBvc2l0aW9uKGJ1dHRvblBvc2l0aW9uKVxuICAgICAgICAgICAgICAgIGluaXRpYWxJc09wZW4gJiYgZGV2dG9vbHMuc2V0SW5pdGlhbElzT3Blbihpbml0aWFsSXNPcGVuKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFzaG91bGRMb2FkVG9vbHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGVsID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3RzcWQtcGFyZW50LWNvbnRhaW5lcicpXG5cbiAgICAgICAgICAgICAgaW1wb3J0KCdAdGFuc3RhY2svcXVlcnktZGV2dG9vbHMnKS50aGVuKChxdWVyeURldnRvb2xzKSA9PlxuICAgICAgICAgICAgICAgIHJ1bkluSW5qZWN0aW9uQ29udGV4dChpbmplY3RvciwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgZGV2dG9vbHMgPSBuZXcgcXVlcnlEZXZ0b29scy5UYW5zdGFja1F1ZXJ5RGV2dG9vbHMoe1xuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zKCksXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudDogZ2V0UmVzb2x2ZWRRdWVyeUNsaWVudCgpLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeUZsYXZvcjogJ0FuZ3VsYXIgUXVlcnknLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAnNScsXG4gICAgICAgICAgICAgICAgICAgIG9ubGluZU1hbmFnZXIsXG4gICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICBlbCAmJiBkZXZ0b29scy5tb3VudChlbClcblxuICAgICAgICAgICAgICAgICAgLy8gVW5tb3VudCB0aGUgZGV2dG9vbHMgb24gYXBwbGljYXRpb24gZGVzdHJveVxuICAgICAgICAgICAgICAgICAgZGVzdHJveVJlZi5vbkRlc3Ryb3koZGVzdHJveURldnRvb2xzKVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICBdXG4gIH1cbiAgcmV0dXJuIHF1ZXJ5RmVhdHVyZSgnRGV2ZWxvcGVyVG9vbHMnLCBwcm92aWRlcnMpXG59XG5cbi8qKlxuICogQSB0eXBlIGFsaWFzIHRoYXQgcmVwcmVzZW50cyBhbGwgUXVlcnkgZmVhdHVyZXMgYXZhaWxhYmxlIGZvciB1c2Ugd2l0aCBgcHJvdmlkZVRhblN0YWNrUXVlcnlgLlxuICogRmVhdHVyZXMgY2FuIGJlIGVuYWJsZWQgYnkgYWRkaW5nIHNwZWNpYWwgZnVuY3Rpb25zIHRvIHRoZSBgcHJvdmlkZVRhblN0YWNrUXVlcnlgIGNhbGwuXG4gKiBTZWUgZG9jdW1lbnRhdGlvbiBmb3IgZWFjaCBzeW1ib2wgdG8gZmluZCBjb3JyZXNwb25kaW5nIGZ1bmN0aW9uIG5hbWUuIFNlZSBhbHNvIGBwcm92aWRlVGFuU3RhY2tRdWVyeWBcbiAqIGRvY3VtZW50YXRpb24gb24gaG93IHRvIHVzZSB0aG9zZSBmdW5jdGlvbnMuXG4gKiBAcHVibGljXG4gKiBAc2VlIHtAbGluayBwcm92aWRlVGFuU3RhY2tRdWVyeX1cbiAqL1xuZXhwb3J0IHR5cGUgUXVlcnlGZWF0dXJlcyA9IERldmVsb3BlclRvb2xzRmVhdHVyZSAvLyBVbmlvbiB0eXBlIG9mIGZlYXR1cmVzIGJ1dCBqdXN0IG9uZSBub3dcblxuZXhwb3J0IGNvbnN0IHF1ZXJ5RmVhdHVyZXMgPSBbJ0RldmVsb3BlclRvb2xzJ10gYXMgY29uc3RcblxuZXhwb3J0IHR5cGUgUXVlcnlGZWF0dXJlS2luZCA9ICh0eXBlb2YgcXVlcnlGZWF0dXJlcylbbnVtYmVyXVxuIl19