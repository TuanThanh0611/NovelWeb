import { computed, untracked } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { assertInjector } from 'ngxtension/assert-injector';
/**
 * Function `toLazySignal()` is a proxy function that will call the original
 * `toSignal()` function when the returned signal is read for the first time.
 */
export function toLazySignal(source, options) {
    const injector = assertInjector(toLazySignal, options?.injector);
    let s;
    return computed(() => {
        if (!s) {
            s = untracked(() => toSignal(source, { ...options, injector }));
        }
        return s();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8tbGF6eS1zaWduYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vdG8tbGF6eS1zaWduYWwvc3JjL3RvLWxhenktc2lnbmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxRQUFRLEVBQXdCLE1BQU0sNEJBQTRCLENBQUM7QUFDNUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBZ0M1RDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUMzQixNQUF1QyxFQUN2QyxPQUFtRDtJQUVuRCxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNqRSxJQUFJLENBQTJCLENBQUM7SUFFaEMsT0FBTyxRQUFRLENBQW1CLEdBQUcsRUFBRTtRQUN0QyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDUixDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxHQUFHLE9BQU8sRUFBRSxRQUFRLEVBQVMsQ0FBQyxDQUFDLENBQUM7UUFDeEUsQ0FBQztRQUNELE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wdXRlZCwgdW50cmFja2VkLCB0eXBlIFNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdG9TaWduYWwsIHR5cGUgVG9TaWduYWxPcHRpb25zIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuaW1wb3J0IHsgYXNzZXJ0SW5qZWN0b3IgfSBmcm9tICduZ3h0ZW5zaW9uL2Fzc2VydC1pbmplY3Rvcic7XG5pbXBvcnQgdHlwZSB7IE9ic2VydmFibGUsIFN1YnNjcmliYWJsZSB9IGZyb20gJ3J4anMnO1xuXG50eXBlIFJldHVyblR5cGU8VCwgVT4gPSAoVCB8IFUpIHwgKFQgfCB1bmRlZmluZWQpIHwgKFQgfCBudWxsKSB8IFQ7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0xhenlTaWduYWw8VD4oXG5cdHNvdXJjZTogT2JzZXJ2YWJsZTxUPiB8IFN1YnNjcmliYWJsZTxUPixcbik6IFNpZ25hbDxUIHwgdW5kZWZpbmVkPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRvTGF6eVNpZ25hbDxUPihcblx0c291cmNlOiBPYnNlcnZhYmxlPFQ+IHwgU3Vic2NyaWJhYmxlPFQ+LFxuXHRvcHRpb25zOiBUb1NpZ25hbE9wdGlvbnM8VD4gJiB7XG5cdFx0aW5pdGlhbFZhbHVlPzogdW5kZWZpbmVkO1xuXHRcdHJlcXVpcmVTeW5jPzogZmFsc2U7XG5cdH0sXG4pOiBTaWduYWw8VCB8IHVuZGVmaW5lZD47XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0xhenlTaWduYWw8VD4oXG5cdHNvdXJjZTogT2JzZXJ2YWJsZTxUPiB8IFN1YnNjcmliYWJsZTxUPixcblx0b3B0aW9uczogVG9TaWduYWxPcHRpb25zPFQ+ICYgeyBpbml0aWFsVmFsdWU/OiBudWxsOyByZXF1aXJlU3luYz86IGZhbHNlIH0sXG4pOiBTaWduYWw8VCB8IG51bGw+O1xuXG5leHBvcnQgZnVuY3Rpb24gdG9MYXp5U2lnbmFsPFQ+KFxuXHRzb3VyY2U6IE9ic2VydmFibGU8VD4gfCBTdWJzY3JpYmFibGU8VD4sXG5cdG9wdGlvbnM6IFRvU2lnbmFsT3B0aW9uczxUPiAmIHsgaW5pdGlhbFZhbHVlPzogdW5kZWZpbmVkOyByZXF1aXJlU3luYzogdHJ1ZSB9LFxuKTogU2lnbmFsPFQ+O1xuXG5leHBvcnQgZnVuY3Rpb24gdG9MYXp5U2lnbmFsPFQsIGNvbnN0IFUgZXh0ZW5kcyBUPihcblx0c291cmNlOiBPYnNlcnZhYmxlPFQ+IHwgU3Vic2NyaWJhYmxlPFQ+LFxuXHRvcHRpb25zOiBUb1NpZ25hbE9wdGlvbnM8VD4gJiB7IGluaXRpYWxWYWx1ZTogVTsgcmVxdWlyZVN5bmM/OiBmYWxzZSB9LFxuKTogU2lnbmFsPFQgfCBVPjtcblxuLyoqXG4gKiBGdW5jdGlvbiBgdG9MYXp5U2lnbmFsKClgIGlzIGEgcHJveHkgZnVuY3Rpb24gdGhhdCB3aWxsIGNhbGwgdGhlIG9yaWdpbmFsXG4gKiBgdG9TaWduYWwoKWAgZnVuY3Rpb24gd2hlbiB0aGUgcmV0dXJuZWQgc2lnbmFsIGlzIHJlYWQgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9MYXp5U2lnbmFsPFQsIFUgPSB1bmRlZmluZWQ+KFxuXHRzb3VyY2U6IE9ic2VydmFibGU8VD4gfCBTdWJzY3JpYmFibGU8VD4sXG5cdG9wdGlvbnM/OiBUb1NpZ25hbE9wdGlvbnM8VD4gJiB7IGluaXRpYWxWYWx1ZT86IFUgfSxcbik6IFNpZ25hbDxSZXR1cm5UeXBlPFQsIFU+PiB7XG5cdGNvbnN0IGluamVjdG9yID0gYXNzZXJ0SW5qZWN0b3IodG9MYXp5U2lnbmFsLCBvcHRpb25zPy5pbmplY3Rvcik7XG5cdGxldCBzOiBTaWduYWw8UmV0dXJuVHlwZTxULCBVPj47XG5cblx0cmV0dXJuIGNvbXB1dGVkPFJldHVyblR5cGU8VCwgVT4+KCgpID0+IHtcblx0XHRpZiAoIXMpIHtcblx0XHRcdHMgPSB1bnRyYWNrZWQoKCkgPT4gdG9TaWduYWwoc291cmNlLCB7IC4uLm9wdGlvbnMsIGluamVjdG9yIH0gYXMgYW55KSk7XG5cdFx0fVxuXHRcdHJldHVybiBzKCk7XG5cdH0pO1xufVxuIl19