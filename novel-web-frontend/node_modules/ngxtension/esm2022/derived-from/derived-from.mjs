import { computed, isSignal, untracked, } from '@angular/core';
import { toObservable, toSignal } from '@angular/core/rxjs-interop';
import { assertInjector } from 'ngxtension/assert-injector';
import { combineLatest, distinctUntilChanged, from, identity, isObservable, startWith, } from 'rxjs';
/**
 * `derivedFrom` is a function that takes an array/object with `Observable` or `Signal` values and returns a `Signal` that
 * emits the values of the `Observable` or `Signal` values. It is similar to `combineLatest` but it will emit
 * when the value of the `Observable` or `Signal` changes.
 *
 * @param {ObservableSignalInputTuple} sources - array/object of `Observable` or `Signal` values
 * @param {OperatorFunction} [operator] - operator to apply to the `Observable` or `Signal` values
 * @param {DerivedFromOptions} [options] - options to pass initialValue and/or injector to use to inject the `Observable` or `Signal` values
 * @returns {Signal} - `Signal` that emits the values of the `Observable` or `Signal` values
 *
 * @example
 *
 * ```ts
 * export class MyComponent {
 *  private readonly filtersService = inject(FiltersService);
 *  readonly pageNumber = signal(1);
 *
 *  readonly data = derivedFrom(
 *   [this.pageNumber, this.filtersService.filters$],
 *   pipe(
 *     switchMap(([pageNumber, filters]) => this.dataService.getData(pageNumber, filters)),
 *     startWith([])
 *   );
 * }
 * ```
 */
export function derivedFrom(...args) {
    const { normalizedSources, hasInitValue, operator, options } = _normalizeArgs(args);
    const injector = assertInjector(derivedFrom, options?.injector);
    /* try { // Custom error handling for derivedFrom */
    const ret = hasInitValue
        ? toSignal(combineLatest(normalizedSources).pipe(operator), {
            initialValue: options.initialValue,
            injector,
        })
        : toSignal(combineLatest(normalizedSources).pipe(operator), {
            injector,
            requireSync: true,
        });
    return ret;
}
function _normalizeArgs(args) {
    if (!args || !args.length || typeof args[0] !== 'object')
        //valid even for Array
        throw new TypeError('derivedFrom needs sources');
    const hasOperator = typeof args[1] === 'function';
    if (args.length == 3 && !hasOperator)
        throw new TypeError('derivedFrom needs pipeable operator as a second argument');
    if (!hasOperator)
        args.splice(1, 0, identity);
    const [sources, operator, options] = args;
    const hasInitValue = !!options && 'initialValue' in options;
    const normalizedSources = Object.entries(sources).reduce((acc, [keyOrIndex, source]) => {
        if (isSignal(source)) {
            acc[keyOrIndex] = toObservable(source, {
                injector: options?.injector,
            }).pipe(startWith(untracked(source)) /* this is done because toObservable doesn't immediatly emit initialValue of the signal */);
        }
        else if (isObservable(source)) {
            acc[keyOrIndex] = source.pipe(distinctUntilChanged());
        }
        else if (typeof source === 'function') {
            const computedFn = computed(source);
            acc[keyOrIndex] = toObservable(computedFn, {
                injector: options?.injector,
            }).pipe(startWith(source()));
        }
        else {
            acc[keyOrIndex] = from(source).pipe(distinctUntilChanged());
        }
        return acc;
    }, (Array.isArray(sources) ? [] : {}));
    return { normalizedSources, operator, hasInitValue, options };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXZlZC1mcm9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3h0ZW5zaW9uL2Rlcml2ZWQtZnJvbS9zcmMvZGVyaXZlZC1mcm9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTixRQUFRLEVBQ1IsUUFBUSxFQUNSLFNBQVMsR0FFVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RCxPQUFPLEVBQ04sYUFBYSxFQUNiLG9CQUFvQixFQUNwQixJQUFJLEVBQ0osUUFBUSxFQUNSLFlBQVksRUFDWixTQUFTLEdBSVQsTUFBTSxNQUFNLENBQUM7QUFpRGQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F5Qkc7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUMxQixHQUFHLElBQVc7SUFFZCxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxjQUFjLENBRzNFLElBQUksQ0FBQyxDQUFDO0lBRVIsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDaEUsb0RBQW9EO0lBQ3BELE1BQU0sR0FBRyxHQUFtQixZQUFZO1FBQ3ZDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzFELFlBQVksRUFBRSxPQUFRLENBQUMsWUFBYTtZQUNwQyxRQUFRO1NBQ1IsQ0FBQztRQUNILENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzFELFFBQVE7WUFDUixXQUFXLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7SUFDTCxPQUFPLEdBQUcsQ0FBQztBQUNaLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FDdEIsSUFBVztJQU9YLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFDdkQsc0JBQXNCO1FBQ3RCLE1BQU0sSUFBSSxTQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUNsRCxNQUFNLFdBQVcsR0FBRyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxVQUFVLENBQUM7SUFDbEQsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVc7UUFDbkMsTUFBTSxJQUFJLFNBQVMsQ0FDbEIsMERBQTBELENBQzFELENBQUM7SUFDSCxJQUFJLENBQUMsV0FBVztRQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM5QyxNQUFNLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDMUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDLE9BQU8sSUFBSSxjQUFjLElBQUksT0FBTyxDQUFDO0lBQzVELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQ3ZELENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUU7UUFDN0IsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUN0QixHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRTtnQkFDdEMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRO2FBQzNCLENBQUMsQ0FBQyxJQUFJLENBQ04sU0FBUyxDQUNSLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FDakIsQ0FBQywwRkFBMEYsQ0FDNUYsQ0FBQztRQUNILENBQUM7YUFBTSxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ2pDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQztRQUN2RCxDQUFDO2FBQU0sSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUUsQ0FBQztZQUN6QyxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBdUIsQ0FBQyxDQUFDO1lBQ3JELEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxZQUFZLENBQUMsVUFBVSxFQUFFO2dCQUMxQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVE7YUFDM0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7YUFBTSxDQUFDO1lBQ1AsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLENBQUM7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUMsRUFDRCxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFRLENBQ3pDLENBQUM7SUFDRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUMvRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0SW5qZWN0b3IsXG5cdGNvbXB1dGVkLFxuXHRpc1NpZ25hbCxcblx0dW50cmFja2VkLFxuXHR0eXBlIFNpZ25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0b09ic2VydmFibGUsIHRvU2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuaW1wb3J0IHsgYXNzZXJ0SW5qZWN0b3IgfSBmcm9tICduZ3h0ZW5zaW9uL2Fzc2VydC1pbmplY3Rvcic7XG5pbXBvcnQge1xuXHRjb21iaW5lTGF0ZXN0LFxuXHRkaXN0aW5jdFVudGlsQ2hhbmdlZCxcblx0ZnJvbSxcblx0aWRlbnRpdHksXG5cdGlzT2JzZXJ2YWJsZSxcblx0c3RhcnRXaXRoLFxuXHR0eXBlIE9ic2VydmFibGVJbnB1dCxcblx0dHlwZSBPYnNlcnZhYmxlSW5wdXRUdXBsZSxcblx0dHlwZSBPcGVyYXRvckZ1bmN0aW9uLFxufSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgT2JzZXJ2YWJsZVNpZ25hbElucHV0PFQ+ID0gT2JzZXJ2YWJsZUlucHV0PFQ+IHwgU2lnbmFsPFQ+O1xuZXhwb3J0IHR5cGUgRGVyaXZlZEZyb21PcHRpb25zPFQ+ID0ge1xuXHRyZWFkb25seSBpbmplY3Rvcj86IEluamVjdG9yO1xuXHRyZWFkb25seSBpbml0aWFsVmFsdWU/OiBUIHwgbnVsbDtcbn07IC8vUGljazxUb1NpZ25hbE9wdGlvbnM8VD4sJ2luamVjdG9yJyB8ICdpbml0aWFsVmFsdWUnPjtcbmV4cG9ydCB0eXBlIEluZmVyT2JzZXJ2YWJsZVNpZ25hbE91dHB1dDxJPiA9IHtcblx0W0sgaW4ga2V5b2YgSV06IElbS10gZXh0ZW5kcyBTaWduYWw8aW5mZXIgUz5cblx0XHQ/IFNcblx0XHQ6IElbS10gZXh0ZW5kcyBPYnNlcnZhYmxlSW5wdXQ8aW5mZXIgTz5cblx0XHRcdD8gT1xuXHRcdFx0OiBuZXZlcjtcbn07XG4vKipcbiAqIFNvIHRoYXQgd2UgY2FuIGhhdmUgYGZuKFtPYnNlcnZhYmxlPEE+LCBTaWduYWw8Qj5dKTogT2JzZXJ2YWJsZTxbQSwgQl0+YFxuICovXG50eXBlIE9ic2VydmFibGVTaWduYWxJbnB1dFR1cGxlPFQ+ID0ge1xuXHRbSyBpbiBrZXlvZiBUXTogT2JzZXJ2YWJsZVNpZ25hbElucHV0PFRbS10+IHwgKCgpID0+IFRbS10pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlcml2ZWRGcm9tPElucHV0IGV4dGVuZHMgcmVhZG9ubHkgdW5rbm93bltdLCBPdXRwdXQgPSBJbnB1dD4oXG5cdHNvdXJjZXM6IHJlYWRvbmx5IFsuLi5PYnNlcnZhYmxlU2lnbmFsSW5wdXRUdXBsZTxJbnB1dD5dLFxuXHRvcGVyYXRvcj86IE9wZXJhdG9yRnVuY3Rpb248SW5wdXQsIE91dHB1dD4sXG5cdG9wdGlvbnM/OiBEZXJpdmVkRnJvbU9wdGlvbnM8T3V0cHV0Pixcbik6IFNpZ25hbDxPdXRwdXQ+O1xuXG5leHBvcnQgZnVuY3Rpb24gZGVyaXZlZEZyb208XG5cdElucHV0IGV4dGVuZHMgcmVhZG9ubHkgdW5rbm93bltdLFxuXHRPdXRwdXQgPSBJbnB1dCwgLy9JbmZlck9ic2VydmFibGVTaWduYWxPdXRwdXQ8SW5wdXQ+XG4+KFxuXHRzb3VyY2VzOiByZWFkb25seSBbLi4uT2JzZXJ2YWJsZVNpZ25hbElucHV0VHVwbGU8SW5wdXQ+XSxcblx0b3B0aW9ucz86IERlcml2ZWRGcm9tT3B0aW9uczxJbnB1dD4sXG4pOiBTaWduYWw8T3V0cHV0PjtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlcml2ZWRGcm9tPElucHV0IGV4dGVuZHMgb2JqZWN0LCBPdXRwdXQgPSBJbnB1dD4oXG5cdHNvdXJjZXM6IE9ic2VydmFibGVTaWduYWxJbnB1dFR1cGxlPElucHV0Pixcblx0b3BlcmF0b3I/OiBPcGVyYXRvckZ1bmN0aW9uPElucHV0LCBPdXRwdXQ+LFxuXHRvcHRpb25zPzogRGVyaXZlZEZyb21PcHRpb25zPE91dHB1dD4sXG4pOiBTaWduYWw8T3V0cHV0PjtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlcml2ZWRGcm9tPFxuXHRJbnB1dCBleHRlbmRzIG9iamVjdCxcblx0T3V0cHV0ID0gSW5wdXQsIC8vSW5mZXJPYnNlcnZhYmxlU2lnbmFsT3V0cHV0PElucHV0PlxuPihcblx0c291cmNlczogT2JzZXJ2YWJsZVNpZ25hbElucHV0VHVwbGU8SW5wdXQ+LFxuXHRvcHRpb25zPzogRGVyaXZlZEZyb21PcHRpb25zPElucHV0Pixcbik6IFNpZ25hbDxPdXRwdXQ+O1xuXG4vKipcbiAqIGBkZXJpdmVkRnJvbWAgaXMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGFuIGFycmF5L29iamVjdCB3aXRoIGBPYnNlcnZhYmxlYCBvciBgU2lnbmFsYCB2YWx1ZXMgYW5kIHJldHVybnMgYSBgU2lnbmFsYCB0aGF0XG4gKiBlbWl0cyB0aGUgdmFsdWVzIG9mIHRoZSBgT2JzZXJ2YWJsZWAgb3IgYFNpZ25hbGAgdmFsdWVzLiBJdCBpcyBzaW1pbGFyIHRvIGBjb21iaW5lTGF0ZXN0YCBidXQgaXQgd2lsbCBlbWl0XG4gKiB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgYE9ic2VydmFibGVgIG9yIGBTaWduYWxgIGNoYW5nZXMuXG4gKlxuICogQHBhcmFtIHtPYnNlcnZhYmxlU2lnbmFsSW5wdXRUdXBsZX0gc291cmNlcyAtIGFycmF5L29iamVjdCBvZiBgT2JzZXJ2YWJsZWAgb3IgYFNpZ25hbGAgdmFsdWVzXG4gKiBAcGFyYW0ge09wZXJhdG9yRnVuY3Rpb259IFtvcGVyYXRvcl0gLSBvcGVyYXRvciB0byBhcHBseSB0byB0aGUgYE9ic2VydmFibGVgIG9yIGBTaWduYWxgIHZhbHVlc1xuICogQHBhcmFtIHtEZXJpdmVkRnJvbU9wdGlvbnN9IFtvcHRpb25zXSAtIG9wdGlvbnMgdG8gcGFzcyBpbml0aWFsVmFsdWUgYW5kL29yIGluamVjdG9yIHRvIHVzZSB0byBpbmplY3QgdGhlIGBPYnNlcnZhYmxlYCBvciBgU2lnbmFsYCB2YWx1ZXNcbiAqIEByZXR1cm5zIHtTaWduYWx9IC0gYFNpZ25hbGAgdGhhdCBlbWl0cyB0aGUgdmFsdWVzIG9mIHRoZSBgT2JzZXJ2YWJsZWAgb3IgYFNpZ25hbGAgdmFsdWVzXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGB0c1xuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IHtcbiAqICBwcml2YXRlIHJlYWRvbmx5IGZpbHRlcnNTZXJ2aWNlID0gaW5qZWN0KEZpbHRlcnNTZXJ2aWNlKTtcbiAqICByZWFkb25seSBwYWdlTnVtYmVyID0gc2lnbmFsKDEpO1xuICpcbiAqICByZWFkb25seSBkYXRhID0gZGVyaXZlZEZyb20oXG4gKiAgIFt0aGlzLnBhZ2VOdW1iZXIsIHRoaXMuZmlsdGVyc1NlcnZpY2UuZmlsdGVycyRdLFxuICogICBwaXBlKFxuICogICAgIHN3aXRjaE1hcCgoW3BhZ2VOdW1iZXIsIGZpbHRlcnNdKSA9PiB0aGlzLmRhdGFTZXJ2aWNlLmdldERhdGEocGFnZU51bWJlciwgZmlsdGVycykpLFxuICogICAgIHN0YXJ0V2l0aChbXSlcbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVyaXZlZEZyb208SW5wdXQgPSBhbnksIE91dHB1dCA9IElucHV0Pihcblx0Li4uYXJnczogYW55W11cbik6IFNpZ25hbDxPdXRwdXQ+IHtcblx0Y29uc3QgeyBub3JtYWxpemVkU291cmNlcywgaGFzSW5pdFZhbHVlLCBvcGVyYXRvciwgb3B0aW9ucyB9ID0gX25vcm1hbGl6ZUFyZ3M8XG5cdFx0SW5wdXQsXG5cdFx0T3V0cHV0XG5cdD4oYXJncyk7XG5cblx0Y29uc3QgaW5qZWN0b3IgPSBhc3NlcnRJbmplY3RvcihkZXJpdmVkRnJvbSwgb3B0aW9ucz8uaW5qZWN0b3IpO1xuXHQvKiB0cnkgeyAvLyBDdXN0b20gZXJyb3IgaGFuZGxpbmcgZm9yIGRlcml2ZWRGcm9tICovXG5cdGNvbnN0IHJldDogU2lnbmFsPE91dHB1dD4gPSBoYXNJbml0VmFsdWVcblx0XHQ/IHRvU2lnbmFsKGNvbWJpbmVMYXRlc3Qobm9ybWFsaXplZFNvdXJjZXMpLnBpcGUob3BlcmF0b3IpLCB7XG5cdFx0XHRcdGluaXRpYWxWYWx1ZTogb3B0aW9ucyEuaW5pdGlhbFZhbHVlISxcblx0XHRcdFx0aW5qZWN0b3IsXG5cdFx0XHR9KVxuXHRcdDogdG9TaWduYWwoY29tYmluZUxhdGVzdChub3JtYWxpemVkU291cmNlcykucGlwZShvcGVyYXRvciksIHtcblx0XHRcdFx0aW5qZWN0b3IsXG5cdFx0XHRcdHJlcXVpcmVTeW5jOiB0cnVlLFxuXHRcdFx0fSk7XG5cdHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVBcmdzPElucHV0LCBPdXRwdXQ+KFxuXHRhcmdzOiBhbnlbXSxcbik6IHtcblx0bm9ybWFsaXplZFNvdXJjZXM6IE9ic2VydmFibGVJbnB1dFR1cGxlPElucHV0Pjtcblx0b3BlcmF0b3I6IE9wZXJhdG9yRnVuY3Rpb248SW5wdXQsIE91dHB1dD47XG5cdGhhc0luaXRWYWx1ZTogYm9vbGVhbjtcblx0b3B0aW9uczogRGVyaXZlZEZyb21PcHRpb25zPE91dHB1dD4gfCB1bmRlZmluZWQ7XG59IHtcblx0aWYgKCFhcmdzIHx8ICFhcmdzLmxlbmd0aCB8fCB0eXBlb2YgYXJnc1swXSAhPT0gJ29iamVjdCcpXG5cdFx0Ly92YWxpZCBldmVuIGZvciBBcnJheVxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2Rlcml2ZWRGcm9tIG5lZWRzIHNvdXJjZXMnKTtcblx0Y29uc3QgaGFzT3BlcmF0b3IgPSB0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJztcblx0aWYgKGFyZ3MubGVuZ3RoID09IDMgJiYgIWhhc09wZXJhdG9yKVxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXG5cdFx0XHQnZGVyaXZlZEZyb20gbmVlZHMgcGlwZWFibGUgb3BlcmF0b3IgYXMgYSBzZWNvbmQgYXJndW1lbnQnLFxuXHRcdCk7XG5cdGlmICghaGFzT3BlcmF0b3IpIGFyZ3Muc3BsaWNlKDEsIDAsIGlkZW50aXR5KTtcblx0Y29uc3QgW3NvdXJjZXMsIG9wZXJhdG9yLCBvcHRpb25zXSA9IGFyZ3M7XG5cdGNvbnN0IGhhc0luaXRWYWx1ZSA9ICEhb3B0aW9ucyAmJiAnaW5pdGlhbFZhbHVlJyBpbiBvcHRpb25zO1xuXHRjb25zdCBub3JtYWxpemVkU291cmNlcyA9IE9iamVjdC5lbnRyaWVzKHNvdXJjZXMpLnJlZHVjZShcblx0XHQoYWNjLCBba2V5T3JJbmRleCwgc291cmNlXSkgPT4ge1xuXHRcdFx0aWYgKGlzU2lnbmFsKHNvdXJjZSkpIHtcblx0XHRcdFx0YWNjW2tleU9ySW5kZXhdID0gdG9PYnNlcnZhYmxlKHNvdXJjZSwge1xuXHRcdFx0XHRcdGluamVjdG9yOiBvcHRpb25zPy5pbmplY3Rvcixcblx0XHRcdFx0fSkucGlwZShcblx0XHRcdFx0XHRzdGFydFdpdGgoXG5cdFx0XHRcdFx0XHR1bnRyYWNrZWQoc291cmNlKSxcblx0XHRcdFx0XHQpIC8qIHRoaXMgaXMgZG9uZSBiZWNhdXNlIHRvT2JzZXJ2YWJsZSBkb2Vzbid0IGltbWVkaWF0bHkgZW1pdCBpbml0aWFsVmFsdWUgb2YgdGhlIHNpZ25hbCAqLyxcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlKHNvdXJjZSkpIHtcblx0XHRcdFx0YWNjW2tleU9ySW5kZXhdID0gc291cmNlLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0Y29uc3QgY29tcHV0ZWRGbiA9IGNvbXB1dGVkKHNvdXJjZSBhcyAoKSA9PiB1bmtub3duKTtcblx0XHRcdFx0YWNjW2tleU9ySW5kZXhdID0gdG9PYnNlcnZhYmxlKGNvbXB1dGVkRm4sIHtcblx0XHRcdFx0XHRpbmplY3Rvcjogb3B0aW9ucz8uaW5qZWN0b3IsXG5cdFx0XHRcdH0pLnBpcGUoc3RhcnRXaXRoKHNvdXJjZSgpIGFzIGFueSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YWNjW2tleU9ySW5kZXhdID0gZnJvbShzb3VyY2UgYXMgYW55KS5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGFjYztcblx0XHR9LFxuXHRcdChBcnJheS5pc0FycmF5KHNvdXJjZXMpID8gW10gOiB7fSkgYXMgYW55LFxuXHQpO1xuXHRyZXR1cm4geyBub3JtYWxpemVkU291cmNlcywgb3BlcmF0b3IsIGhhc0luaXRWYWx1ZSwgb3B0aW9ucyB9O1xufVxuIl19